package frmQLCafe;

import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import java.awt.Color;
import javax.swing.JLabel;
import java.awt.Font;
import java.io.Serializable;
import javax.swing.border.TitledBorder;
import javax.swing.JTextField;
import javax.swing.JTable;
import javax.swing.JButton;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.Vector;

import javax.swing.JFileChooser;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import javax.swing.JOptionPane;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class frmQuanLySanPham extends JFrame implements Serializable {

    private static final long serialVersionUID = 1L;

    private JTextField txtTenSanPham;
    private JTextField txtGia;
    private JTable tableSanPham;

    private static final String URL = "jdbc:mysql://localhost:3306/cafe";
    private static final String USER = "root"; // Thay thế bằng tên người dùng MySQL của bạn
    private static final String PASSWORD = ""; // Thay thế bằng mật khẩu MySQL của bạn

    private JTextField textFieldImagePath; // TextField for image path

    private int selectedRow = -1;
    private JTextField txtMaSP;

    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    frmQuanLySanPham window = new frmQuanLySanPham();
                    window.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public frmQuanLySanPham() {
        getContentPane().setBackground(new Color(255, 255, 255));
        initialize();
        loadDataToTable();
    }

    private void initialize() {
        getContentPane().setBackground(new Color(255, 255, 255));
        setBounds(100, 100, 803, 569);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        JPanel panel = new JPanel();
        panel.setLayout(null);
        panel.setBackground(Color.BLACK);
        panel.setBounds(-1, 0, 790, 51);
        getContentPane().add(panel);

        JLabel lblSnPhm = new JLabel("SẢN PHẨM ");
        lblSnPhm.setForeground(Color.WHITE);
        lblSnPhm.setFont(new Font("Tahoma", Font.BOLD, 20));
        lblSnPhm.setBounds(342, 10, 117, 31);
        panel.add(lblSnPhm);

        JPanel panel_1 = new JPanel();
        panel_1.setBackground(new Color(255, 255, 255));
        panel_1.setBorder(new TitledBorder(null, "Danh S\u00E1ch S\u1EA3n Ph\u1EA9m ", TitledBorder.LEADING, TitledBorder.TOP, null, null));
        panel_1.setBounds(-1, 51, 790, 432);
        getContentPane().add(panel_1);
        panel_1.setLayout(null);

        JLabel lblNewLabel_1 = new JLabel("Tên Sản Phẩm : ");
        lblNewLabel_1.setForeground(Color.BLACK);
        lblNewLabel_1.setFont(new Font("Tahoma", Font.BOLD, 12));
        lblNewLabel_1.setBounds(10, 80, 179, 22);
        panel_1.add(lblNewLabel_1);

        JLabel lblNewLabel_1_1 = new JLabel("Giá : ");
        lblNewLabel_1_1.setForeground(Color.BLACK);
        lblNewLabel_1_1.setFont(new Font("Tahoma", Font.BOLD, 12));
        lblNewLabel_1_1.setBounds(10, 112, 179, 22);
        panel_1.add(lblNewLabel_1_1);

        txtTenSanPham = new JTextField();
        txtTenSanPham.setColumns(10);
        txtTenSanPham.setBounds(199, 83, 581, 19);
        panel_1.add(txtTenSanPham);

        txtGia = new JTextField();
        txtGia.setColumns(10);
        txtGia.setBounds(199, 115, 581, 19);
        panel_1.add(txtGia);

        JScrollPane scrollPane = new JScrollPane();
        scrollPane.setBounds(10, 193, 770, 190);
        panel_1.add(scrollPane);

        tableSanPham = new JTable();
        tableSanPham.setBackground(new Color(242, 242, 242));
        scrollPane.setViewportView(tableSanPham);

        JButton btnThemSP = new JButton("Thêm Sản Phẩm ");
        btnThemSP.setForeground(Color.WHITE);
        btnThemSP.setFont(new Font("Tahoma", Font.BOLD, 12));
        btnThemSP.setBackground(Color.BLACK);
        btnThemSP.setBounds(20, 393, 155, 29);
        panel_1.add(btnThemSP);

        btnThemSP.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                themSanPham(); // Gọi phương thức để thêm sản phẩm
                loadDataToTable(); // Load lại dữ liệu sau khi thêm sản phẩm
            }
        });

        JButton btnSuaSP = new JButton("Sửa Sản Phẩm ");
        btnSuaSP.setForeground(Color.WHITE);
        btnSuaSP.setFont(new Font("Tahoma", Font.BOLD, 12));
        btnSuaSP.setBackground(Color.BLACK);
        btnSuaSP.setBounds(221, 393, 155, 29);
        panel_1.add(btnSuaSP);

        JButton btnXoaSP = new JButton("Xóa Sản Phẩm ");
        btnXoaSP.setForeground(Color.WHITE);
        btnXoaSP.setFont(new Font("Tahoma", Font.BOLD, 12));
        btnXoaSP.setBackground(Color.BLACK);
        btnXoaSP.setBounds(423, 393, 155, 29);
        panel_1.add(btnXoaSP);

        JLabel lblMaSP = new JLabel("Mã SP : ");
        lblMaSP.setForeground(Color.BLACK);
        lblMaSP.setFont(new Font("Tahoma", Font.BOLD, 12));
        lblMaSP.setBounds(10, 48, 179, 22);
        panel_1.add(lblMaSP);

        txtMaSP = new JTextField();
        txtMaSP.setEditable(false); // Chỉ đọc, không cho phép nhập liệu
        txtMaSP.setColumns(10);
        txtMaSP.setBounds(199, 51, 581, 19);
        panel_1.add(txtMaSP);

        JButton btnXoaTatCa = new JButton("Xóa tất cả");
        btnXoaTatCa.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // Đặt các trường nhập liệu về rỗng
                txtMaSP.setText("");
                txtTenSanPham.setText("");
                txtGia.setText("");
                textFieldImagePath.setText("");
            }
        });

        btnXoaTatCa.setForeground(Color.WHITE);
        btnXoaTatCa.setFont(new Font("Tahoma", Font.BOLD, 12));
        btnXoaTatCa.setBackground(Color.BLACK);
        btnXoaTatCa.setBounds(610, 393, 155, 29);
        panel_1.add(btnXoaTatCa);

        // Xử lý sự kiện khi click vào một dòng trên bảng
        tableSanPham.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = tableSanPham.getSelectedRow();
                if (row >= 0) {
                    selectedRow = row;
                    DefaultTableModel model = (DefaultTableModel) tableSanPham.getModel();
                    txtMaSP.setText(model.getValueAt(row, 0).toString()); // Hiển thị mã sản phẩm
                    txtTenSanPham.setText(model.getValueAt(row, 1).toString());
                    txtGia.setText(model.getValueAt(row, 2).toString());
                    textFieldImagePath.setText(model.getValueAt(row, 3).toString());
                }
            }
        });

        btnSuaSP.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                suaSanPham(); // Gọi phương thức để sửa sản phẩm
                loadDataToTable(); // Load lại dữ liệu sau khi sửa sản phẩm
            }
        });

        btnXoaSP.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                xoaSanPham(); // Gọi phương thức để xóa sản phẩm
                loadDataToTable(); // Load lại dữ liệu sau khi xóa sản phẩm
            }
        });

        JLabel lblNewLabel_1_1_1 = new JLabel("Hình ảnh :");
        lblNewLabel_1_1_1.setForeground(Color.BLACK);
        lblNewLabel_1_1_1.setFont(new Font("Tahoma", Font.BOLD, 12));
        lblNewLabel_1_1_1.setBounds(10, 149, 179, 22);
        panel_1.add(lblNewLabel_1_1_1);

        textFieldImagePath = new JTextField();
        textFieldImagePath.setColumns(10);
        textFieldImagePath.setBounds(199, 152, 387, 19);
        panel_1.add(textFieldImagePath);

        JButton btnNewButton = new JButton("Chọn hình ảnh");
        btnNewButton.setForeground(Color.WHITE);
        btnNewButton.setFont(new Font("Tahoma", Font.BOLD, 12));
        btnNewButton.setBackground(Color.BLACK);
        btnNewButton.setBounds(610, 151, 170, 21);
        panel_1.add(btnNewButton);

        btnNewButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                int result = fileChooser.showOpenDialog(null);
                if (result == JFileChooser.APPROVE_OPTION) {
                    String filePath = fileChooser.getSelectedFile().getAbsolutePath();
                    textFieldImagePath.setText(filePath); // Hiển thị đường dẫn của hình ảnh
                }
            }
        });
    }

    private void themSanPham() {
        String tenSanPham = txtTenSanPham.getText();
        String gia = txtGia.getText();
        String hinhAnh = textFieldImagePath.getText(); // Get the image path from the text field

        // Kiểm tra các trường nhập liệu
        if (tenSanPham.isEmpty() || gia.isEmpty() || hinhAnh.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin sản phẩm.");
            return;
        }

        try {
            Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
            String sql = "INSERT INTO sanpham (TenSP, Gia, HinhAnh) VALUES (?, ?, ?)";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, tenSanPham);
            stmt.setString(2, gia);
            stmt.setString(3, hinhAnh);
            stmt.executeUpdate();
            conn.close();
            JOptionPane.showMessageDialog(null, "Thêm sản phẩm thành công.");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Lỗi khi thêm sản phẩm: " + e.getMessage());
        }
    }

    private void suaSanPham() {
        String maSP = txtMaSP.getText(); // Lấy mã sản phẩm từ TextField
        String tenSanPham = txtTenSanPham.getText();
        String gia = txtGia.getText();
        String hinhAnh = textFieldImagePath.getText(); // Get the image path from the text field

        // Kiểm tra các trường nhập liệu
        if (maSP.isEmpty() || tenSanPham.isEmpty() || gia.isEmpty() || hinhAnh.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin sản phẩm.");
            return;
        }

        try {
            Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
            String sql = "UPDATE sanpham SET TenSP = ?, Gia = ?, HinhAnh = ? WHERE MaSP = ?";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, tenSanPham);
            stmt.setString(2, gia);
            stmt.setString(3, hinhAnh);
            stmt.setString(4, maSP); // Sử dụng mã sản phẩm để xác định sản phẩm cần sửa
            stmt.executeUpdate();
            conn.close();
            JOptionPane.showMessageDialog(null, "Sửa sản phẩm thành công.");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Lỗi khi sửa sản phẩm: " + e.getMessage());
        }
    }

    private void xoaSanPham() {
        String maSP = txtMaSP.getText(); // Lấy mã sản phẩm từ TextField

        if (maSP.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn sản phẩm để xóa.");
            return;
        }

        try {
            Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
            String sql = "DELETE FROM sanpham WHERE MaSP = ?";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, maSP);
            stmt.executeUpdate();
            conn.close();
            JOptionPane.showMessageDialog(null, "Xóa sản phẩm thành công.");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Lỗi khi xóa sản phẩm: " + e.getMessage());
        }
    }

    private void loadDataToTable() {
        try {
            Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
            String sql = "SELECT MaSP, TenSP, Gia, HinhAnh FROM sanpham";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();

            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Mã SP");
            model.addColumn("Tên Sản Phẩm");
            model.addColumn("Giá");
            model.addColumn("Hình Ảnh");

            while (rs.next()) {
                Vector<String> row = new Vector<>();
                row.add(rs.getString("MaSP"));
                row.add(rs.getString("TenSP"));
                row.add(rs.getString("Gia"));
                row.add(rs.getString("HinhAnh"));
                model.addRow(row);
            }

            tableSanPham.setModel(model);
            conn.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Lỗi khi tải dữ liệu: " + e.getMessage());
        }
    }
}
