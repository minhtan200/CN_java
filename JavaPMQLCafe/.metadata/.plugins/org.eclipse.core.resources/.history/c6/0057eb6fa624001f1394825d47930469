package frmQLCafe;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;
import javax.swing.border.LineBorder;
import javax.swing.border.EmptyBorder;

public class frmQuanLyKhoHang extends JFrame {

    private static final long serialVersionUID = 1L;

    private JTextField txtTimKiem;
    private JTable tableCTDonHang;
    private JScrollPane scrollPane_DSSP;
    private JTable tableSanPham;
    private JPanel panel_DSSP;
    private JTextArea textAreaTongTienCongLai;
    private TableRowSorter<DefaultTableModel> rowSorter;

    private static final String URL = "jdbc:mysql://localhost:3306/cafe";
    private static final String USER = "root";  
    private static final String PASSWORD = "";  

    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    frmQuanLyKhoHang window = new frmQuanLyKhoHang();
                    window.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public frmQuanLyKhoHang() {
        getContentPane().setBackground(new Color(255, 255, 255));
        initialize();
        loadDataToTable();
        loadSanPhamToScrollPane();
        calculateAndSetTotal();
    }

    private void initialize() {
        setTitle("Quản Lý Kho Hàng");
        setSize(1130, 780);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        JPanel panel = new JPanel();
        panel.setLayout(null);
        panel.setBackground(Color.BLACK);
        panel.setBounds(0, 0, 1116, 51);
        getContentPane().add(panel);

        JLabel lblHan = new JLabel("KHO HÀNG");
        lblHan.setForeground(Color.WHITE);
        lblHan.setFont(new Font("Tahoma", Font.BOLD, 20));
        lblHan.setBounds(500, 10, 150, 31);
        panel.add(lblHan);

        JLabel lblNewLabel_1 = new JLabel("Tìm kiếm : ");
        lblNewLabel_1.setForeground(Color.BLACK);
        lblNewLabel_1.setFont(new Font("Tahoma", Font.BOLD, 12));
        lblNewLabel_1.setBounds(10, 61, 75, 22);
        getContentPane().add(lblNewLabel_1);

        txtTimKiem = new JTextField();
        txtTimKiem.setColumns(10);
        txtTimKiem.setBounds(77, 64, 237, 19);
        getContentPane().add(txtTimKiem);

        JButton btnTimKiem = new JButton("Tìm Kiếm ");
        btnTimKiem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String text = txtTimKiem.getText();
                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }
        });
        btnTimKiem.setForeground(Color.WHITE);
        btnTimKiem.setFont(new Font("Tahoma", Font.BOLD, 12));
        btnTimKiem.setBackground(Color.BLACK);
        btnTimKiem.setBounds(324, 58, 125, 30);
        getContentPane().add(btnTimKiem);

        JPanel panel_KhoHang = new JPanel();
        panel_KhoHang.setBackground(new Color(255, 255, 255));
        panel_KhoHang.setBorder(new TitledBorder(null, "Danh Sách Sản Phẩm", TitledBorder.LEADING, TitledBorder.TOP, null, null));
        panel_KhoHang.setBounds(10, 90, 547, 643);
        getContentPane().add(panel_KhoHang);
        panel_KhoHang.setLayout(null);

        scrollPane_DSSP = new JScrollPane();
        scrollPane_DSSP.setBounds(10, 22, 429, 611);
        panel_KhoHang.add(scrollPane_DSSP);

        tableSanPham = new JTable();
        tableSanPham.setBackground(new Color(242, 242, 242));
        scrollPane_DSSP.setViewportView(tableSanPham);

        JPanel panel_CTDH = new JPanel();
        panel_CTDH.setBackground(new Color(255, 255, 255));
        panel_CTDH.setBorder(new TitledBorder(null, "Thông Tin Sản Phẩm", TitledBorder.LEADING, TitledBorder.TOP, null, null));
        panel_CTDH.setBounds(567, 61, 539, 609);
        getContentPane().add(panel_CTDH);
        panel_CTDH.setLayout(null);

        JScrollPane scrollPane_CTDH = new JScrollPane();
        scrollPane_CTDH.setBounds(10, 21, 519, 380);
        panel_CTDH.add(scrollPane_CTDH);

        tableCTDonHang = new JTable();
        tableCTDonHang.setBackground(new Color(242, 242, 242));
        scrollPane_CTDH.setViewportView(tableCTDonHang);

        JLabel lblNewLabel_1_3 = new JLabel("Tổng Số Tiền :");
        lblNewLabel_1_3.setForeground(Color.BLACK);
        lblNewLabel_1_3.setFont(new Font("Tahoma", Font.BOLD, 12));
        lblNewLabel_1_3.setBounds(18, 435, 179, 22);
        panel_CTDH.add(lblNewLabel_1_3);

        textAreaTongTienCongLai = new JTextArea();
        textAreaTongTienCongLai.setBounds(155, 435, 220, 19);
        panel_CTDH.add(textAreaTongTienCongLai);

        JButton btnXoaDH = new JButton("Xóa Sản Phẩm");
        btnXoaDH.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int selectedRow = tableCTDonHang.getSelectedRow();
                if (selectedRow != -1) {
                    int maSanPham = (int) tableCTDonHang.getValueAt(selectedRow, 1);

                    DefaultTableModel modelCTDH = (DefaultTableModel) tableCTDonHang.getModel();
                    modelCTDH.removeRow(selectedRow);

                    try {
                        Connection conn = getConnection();
                        if (conn != null) {
                            String deleteQuery = "DELETE FROM chitietdonhang WHERE MaSanPham = ?";
                            PreparedStatement pstmt =
                            		conn.prepareStatement(deleteQuery);
                            pstmt.setInt(1, maSanPham);
                            pstmt.executeUpdate();
                            pstmt.close();
                            conn.close();
                            }
                            } catch (SQLException ex) {
                            ex.printStackTrace();
                            }
                            } else {
                            JOptionPane.showMessageDialog(null, "Vui lòng chọn một sản phẩm để xóa!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                            }
                            calculateAndSetTotal();
                            }
                            });
                            btnXoaDH.setForeground(Color.WHITE);
                            btnXoaDH.setFont(new Font("Tahoma", Font.BOLD, 12));
                            btnXoaDH.setBackground(Color.BLACK);
                            btnXoaDH.setBounds(21, 480, 229, 47);
                            panel_CTDH.add(btnXoaDH);    JButton btnThemSanPham = new JButton("Thêm Sản Phẩm");
                            btnThemSanPham.addActionListener(new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    openQuanLySanPhamForm();
                                }
                            });
                            btnThemSanPham.setForeground(Color.WHITE);
                            btnThemSanPham.setFont(new Font("Tahoma", Font.BOLD, 12));
                            btnThemSanPham.setBackground(Color.BLACK);
                            btnThemSanPham.setBounds(275, 480, 229, 47);
                            panel_CTDH.add(btnThemSanPham);

                            JButton btnXoaTatCaDonHang = new JButton("Xóa Tất Cả Sản Phẩm");
                            btnXoaTatCaDonHang.addActionListener(new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    int confirmed = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn xóa tất cả sản phẩm?", "Xác nhận", JOptionPane.YES_NO_OPTION);
                                    if (confirmed == JOptionPane.YES_OPTION) {
                                        DefaultTableModel modelCTDH = (DefaultTableModel) tableCTDonHang.getModel();
                                        modelCTDH.setRowCount(0); // Xóa tất cả các dòng trong bảng

                                        try {
                                            Connection conn = getConnection();
                                            if (conn != null) {
                                                String deleteAllQuery = "DELETE FROM chitietdonhang";
                                                Statement stmt = conn.createStatement();
                                                stmt.executeUpdate(deleteAllQuery);
                                                stmt.close();
                                                conn.close();
                                            }
                                        } catch (SQLException ex) {
                                            ex.printStackTrace();
                                        }
                                    }
                                    calculateAndSetTotal();
                                }
                            });
                            btnXoaTatCaDonHang.setForeground(Color.WHITE);
                            btnXoaTatCaDonHang.setFont(new Font("Tahoma", Font.BOLD, 12));
                            btnXoaTatCaDonHang.setBackground(Color.BLACK);
                            btnXoaTatCaDonHang.setBounds(21, 547, 229, 47);
                            panel_CTDH.add(btnXoaTatCaDonHang);

                            JButton btnThoat = new JButton("Thoát");
                            btnThoat.addActionListener(new ActionListener() {
                                public void actionPerformed(ActionEvent e) {
                                    int confirm = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn thoát không?", "Xác nhận thoát", JOptionPane.YES_NO_OPTION);
                                    if (confirm == JOptionPane.YES_OPTION) {
                                        dispose(); // Đóng cửa sổ hiện tại
                                    }
                                }
                            });
                            btnThoat.setForeground(Color.WHITE);
                            btnThoat.setFont(new Font("Tahoma", Font.BOLD, 12));
                            btnThoat.setBackground(Color.BLACK);
                            btnThoat.setBounds(784, 680, 95, 38);
                            getContentPane().add(btnThoat);

                            // Thêm DocumentListener cho txtTimKiem
                            txtTimKiem.getDocument().addDocumentListener(new DocumentListener() {
                                @Override
                                public void insertUpdate(DocumentEvent e) {
                                    String text = txtTimKiem.getText();
                                    if (text.trim().length() == 0) {
                                        rowSorter.setRowFilter(null);
                                    } else {
                                        rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                                    }
                                }

                                @Override
                                public void removeUpdate(DocumentEvent e) {
                                    String text = txtTimKiem.getText();
                                    if (text.trim().length() == 0) {
                                        rowSorter.setRowFilter(null);
                                    } else {
                                        rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                                    }
                                }

                                @Override
                                public void changedUpdate(DocumentEvent e) {
                                    // Không cần xử lý changedUpdate
                                }
                            });
                        }

                        private void loadDataToTable() {
                            Vector<Vector<Object>> data = getChiTietDonHang();
                            Vector<String> columnNames = new Vector<>();
                            columnNames.add("Mã Chi Tiết Sản Phẩm");
                            columnNames.add("Mã Sản Phẩm");
                            columnNames.add("Số Lượng");
                            columnNames.add("Tổng Tiền");

                            DefaultTableModel model = new DefaultTableModel(data, columnNames);
                            tableCTDonHang.setModel(model);
                        }

                        private Vector<Vector<Object>> getChiTietDonHang() {
                            Vector<Vector<Object>> data = new Vector<>();
                            Connection conn = getConnection();

                            if (conn != null) {
                                try {
                                    Statement stmt = conn.createStatement();
                                    String query = "SELECT MaChiTietSanPham, MaSanPham, SoLuong, TongTien FROM chitietsanpham";
                                    ResultSet rs = stmt.executeQuery(query);

                                    while (rs.next()) {
                                        Vector<Object> row = new Vector<>();
                                        row.add(rs.getInt("MaChiTietSanPham"));
                                        row.add(rs.getInt("MaSanPham"));
                                        row.add(rs.getInt("SoLuong"));
                                        row.add(rs.getDouble("TongTien"));
                                        data.add(row);
                                    }

                                    rs.close();
                                    stmt.close();
                                    conn.close();
                                } catch (SQLException e) {
                                    e.printStackTrace();
                                }
                            }

                            return data;
                        }

                        private void loadSanPhamToScrollPane() {
                            tableSanPham.setBackground(new Color(242, 242, 242));

                            DefaultTableModel modelSanPham = new DefaultTableModel();
                            modelSanPham
